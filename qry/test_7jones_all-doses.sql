WITH NURSE_UNIT_PTS AS (
	SELECT DISTINCT
		ENCNTR_LOC_HIST.ENCNTR_ID,
		ENCOUNTER.PERSON_ID,
		ENCNTR_LOC_HIST.ENCNTR_LOC_HIST_ID,
		ENCNTR_LOC_HIST.BEG_EFFECTIVE_DT_TM,
		ENCNTR_LOC_HIST.END_EFFECTIVE_DT_TM,
		ENCNTR_LOC_HIST.TRANSACTION_DT_TM,
		ENCNTR_LOC_HIST.LOC_FACILITY_CD,
		ENCNTR_LOC_HIST.LOC_NURSE_UNIT_CD,
		ENCOUNTER.REG_DT_TM,
		ENCOUNTER.DISCH_DT_TM
	FROM
		ENCNTR_LOC_HIST,
		ENCOUNTER
	WHERE
		ENCNTR_LOC_HIST.LOC_NURSE_UNIT_CD = 283905037 -- HH 7J
		AND ENCNTR_LOC_HIST.END_EFFECTIVE_DT_TM >= pi_to_gmt(TRUNC(ADD_MONTHS(SYSDATE, -4), 'MONTH'), pi_time_zone(2, @Variable('BOUSER')))
		AND ENCNTR_LOC_HIST.ENCNTR_ID = ENCOUNTER.ENCNTR_ID
		/* AND ENCNTR_LOC_HIST.TRANSACTION_DT_TM BETWEEN
			pi_to_gmt(TRUNC(ADD_MONTHS(SYSDATE, -1), 'MONTH'), pi_time_zone(2, @Variable('BOUSER')))
			AND pi_to_gmt(TRUNC(SYSDATE, 'MONTH') - 1/86400, pi_time_zone(2, @Variable('BOUSER'))) */
), DOSES AS (
	SELECT DISTINCT
		NURSE_UNIT_PTS.ENCNTR_ID,
		NURSE_UNIT_PTS.PERSON_ID,
		CLINICAL_EVENT.EVENT_END_DT_TM,
		pi_from_gmt(CLINICAL_EVENT.EVENT_END_DT_TM, (pi_time_zone(1, @Variable('BOUSER')))) AS DOSE_DATETIME,
		CLINICAL_EVENT.EVENT_ID,
		CLINICAL_EVENT.PARENT_EVENT_ID,
		CLINICAL_EVENT.ORDER_ID,
		CASE 
			WHEN ORDERS.TEMPLATE_ORDER_ID = 0 THEN ORDERS.ORDER_ID
			ELSE ORDERS.TEMPLATE_ORDER_ID
		END AS ORIG_ORDER_ID,
		CLINICAL_EVENT.EVENT_CD,
		pi_get_cv_display(CLINICAL_EVENT.EVENT_CD) AS MEDICATION,
		CE_MED_RESULT.ADMIN_DOSAGE,
		CE_MED_RESULT.DOSAGE_UNIT_CD,
		pi_get_cv_display(CE_MED_RESULT.DOSAGE_UNIT_CD) AS DOSAGE_UNIT,
		CE_MED_RESULT.INFUSION_RATE,
		CE_MED_RESULT.INFUSION_UNIT_CD,
		pi_get_cv_display(CE_MED_RESULT.INFUSION_UNIT_CD) AS INFUSION_UNIT,
		CE_MED_RESULT.ADMIN_ROUTE_CD,
		pi_get_cv_display(CE_MED_RESULT.ADMIN_ROUTE_CD) AS ADMIN_ROUTE,
		CE_MED_RESULT.IV_EVENT_CD,
		pi_get_cv_display(CE_MED_RESULT.IV_EVENT_CD) AS IV_EVENT,
		CE_MED_RESULT.DILUENT_TYPE_CD,
		pi_get_cv_display(CE_MED_RESULT.DILUENT_TYPE_CD) AS DILUENT_TYPE
	FROM
		CE_MED_RESULT,
		CLINICAL_EVENT,
		ENCNTR_LOC_HIST,
		NURSE_UNIT_PTS,
		ORDERS
	WHERE
		NURSE_UNIT_PTS.ENCNTR_ID = CLINICAL_EVENT.ENCNTR_ID
		AND CLINICAL_EVENT.EVENT_CLASS_CD = 158 -- MED
		AND CLINICAL_EVENT.EVENT_CD NOT IN (
			34239833, -- Administration Information
			37557975, -- remove patch
			94132365, -- nutritional supplemental
			37556835, -- empty container
			894195441 -- Overfill Diluent Estimated
		)
		AND CLINICAL_EVENT.EVENT_END_DT_TM BETWEEN
			pi_to_gmt(TRUNC(ADD_MONTHS(SYSDATE, -4), 'MONTH'), pi_time_zone(2, @Variable('BOUSER')))
			AND pi_to_gmt(TRUNC(ADD_MONTHS(SYSDATE, -3), 'MONTH') - 1/86400, pi_time_zone(2, @Variable('BOUSER')))
			-- AND pi_to_gmt(TRUNC(SYSDATE, 'MONTH') - 1/86400, pi_time_zone(2, @Variable('BOUSER')))
		AND CLINICAL_EVENT.EVENT_ID = CE_MED_RESULT.EVENT_ID
		AND CE_MED_RESULT.IV_EVENT_CD IN (
			0,
			688706 -- Begin Bag
		)
		AND (CE_MED_RESULT.ADMIN_DOSAGE > 0 OR CE_MED_RESULT.INFUSION_RATE > 0)
		AND CLINICAL_EVENT.ENCNTR_ID = ENCNTR_LOC_HIST.ENCNTR_ID
		AND ENCNTR_LOC_HIST.BEG_EFFECTIVE_DT_TM <= CLINICAL_EVENT.EVENT_END_DT_TM
		AND ENCNTR_LOC_HIST.TRANSACTION_DT_TM = (
			SELECT MAX(ELH.TRANSACTION_DT_TM)
			FROM ENCNTR_LOC_HIST ELH
			WHERE
				CLINICAL_EVENT.ENCNTR_ID = ELH.ENCNTR_ID
				AND ELH.TRANSACTION_DT_TM <= CLINICAL_EVENT.EVENT_END_DT_TM
		)
		AND ENCNTR_LOC_HIST.END_EFFECTIVE_DT_TM >= CLINICAL_EVENT.EVENT_END_DT_TM
		AND ENCNTR_LOC_HIST.LOC_NURSE_UNIT_CD = 283905037 -- HH 7J
		AND CLINICAL_EVENT.ORDER_ID = ORDERS.ORDER_ID
), NO_DILUENTS AS (
	SELECT *
	FROM DOSES
	WHERE
		IV_EVENT_CD > 0
		OR DILUENT_TYPE_CD = 0
), ACTIONS AS (
	SELECT
		NO_DILUENTS.ENCNTR_ID,
		NO_DILUENTS.EVENT_ID,
		NO_DILUENTS.ORIG_ORDER_ID,
		MAX(ORDER_ACTION.ACTION_SEQUENCE) AS ACTION_SEQUENCE
	FROM
		NO_DILUENTS,
		ORDER_ACTION
	WHERE
		NO_DILUENTS.ORIG_ORDER_ID = ORDER_ACTION.ORDER_ID
		AND ORDER_ACTION.ACTION_DT_TM < NO_DILUENTS.EVENT_END_DT_TM
	GROUP BY
		NO_DILUENTS.ENCNTR_ID,
		NO_DILUENTS.EVENT_ID,
		NO_DILUENTS.ORIG_ORDER_ID
), DOSES_ACTIONS AS (
	SELECT
		NO_DILUENTS.*,
		ACTIONS.ACTION_SEQUENCE
	FROM
		ACTIONS,
		NO_DILUENTS
	WHERE
		NO_DILUENTS.EVENT_ID = ACTIONS.EVENT_ID
), MED_PRODS AS (
	SELECT
		DOSES_ACTIONS.EVENT_ID,
		ORDER_PRODUCT.ITEM_ID,
		ORDER_PRODUCT.DOSE_QUANTITY,
		ORDER_PRODUCT.DOSE_QUANTITY_UNIT_CD,
		pi_get_cv_display(ORDER_PRODUCT.DOSE_QUANTITY_UNIT_CD) AS DOSE_QUANTITY_UNIT
	FROM
		DOSES_ACTIONS,
		ORDER_PRODUCT
	WHERE
		DOSES_ACTIONS.ORIG_ORDER_ID = ORDER_PRODUCT.ORDER_ID
		AND DOSES_ACTIONS.ACTION_SEQUENCE = ORDER_PRODUCT.ACTION_SEQUENCE
		AND ORDER_PRODUCT.INGRED_SEQUENCE = 1
		AND ORDER_PRODUCT.ITEM_ID <> 5902104 -- sodium chloride SOLN	
/* ), MED_PRODS AS (
	SELECT
		DOSES.ORIG_ORDER_ID,
		ORDER_PRODUCT.ITEM_ID,
		MIN(ORDER_PRODUCT.ACTION_SEQUENCE) AS ACTION_SEQUENCE,
		MIN(ORDER_PRODUCT.DOSE_QUANTITY) KEEP (DENSE_RANK FIRST ORDER BY ACTION_SEQUENCE) AS DOSE_QUANTITY,
		MIN(ORDER_PRODUCT.DOSE_QUANTITY_UNIT_CD) KEEP (DENSE_RANK FIRST ORDER BY ACTION_SEQUENCE) AS DOSE_QUANTITY_UNIT_CD
	FROM
		DOSES,
		ORDER_PRODUCT
	WHERE
		DOSES.ORIG_ORDER_ID = ORDER_PRODUCT.ORDER_ID
		AND ORDER_PRODUCT.INGRED_SEQUENCE = 1
		AND ORDER_PRODUCT.ITEM_ID NOT IN (
			5902104 -- sodium chloride SOLN
		)
	GROUP BY
		DOSES.ORIG_ORDER_ID,
		ORDER_PRODUCT.ITEM_ID */
/* ), FIRST_ACTION AS (
	SELECT
		ORIG_ORDER_ID,
		MIN(ACTION_SEQUENCE) AS ACTION_SEQUENCE
	FROM MED_PRODS
	GROUP BY
		ORIG_ORDER_ID */
), NDC_LOOKUP AS (
	SELECT DISTINCT
		DOSES_ACTIONS.ORIG_ORDER_ID,
		DOSES_ACTIONS.ACTION_SEQUENCE,
		MIN(PHA_PROD_DISP_OBS_ST.RXA_INNER_PKG_QTY) KEEP (DENSE_RANK FIRST ORDER BY PHA_PROD_DISP_OBS_ST.ACTION_SEQ) AS RXA_INNER_PKG_QTY,
		MIN(PHA_PROD_DISP_OBS_ST.RXA_INNER_PKG_UNIT_CD) KEEP (DENSE_RANK FIRST ORDER BY PHA_PROD_DISP_OBS_ST.ACTION_SEQ) AS RXA_INNER_PKG_UNIT_CD,
		pi_get_cv_display(MIN(PHA_PROD_DISP_OBS_ST.RXA_INNER_PKG_UNIT_CD) KEEP (DENSE_RANK FIRST ORDER BY PHA_PROD_DISP_OBS_ST.ACTION_SEQ)) AS RXA_INNER_PKG_UNIT,
		MIN(PHA_PROD_DISP_OBS_ST.MANF_NDC_STR) KEEP (DENSE_RANK FIRST ORDER BY PHA_PROD_DISP_OBS_ST.ACTION_SEQ) AS MANF_NDC_STR,
		MIN(SUBSTR(REGEXP_REPLACE(PHA_PROD_DISP_OBS_ST.MANF_NDC_STR, '-', ''), 1, 11)) KEEP (DENSE_RANK FIRST ORDER BY PHA_PROD_DISP_OBS_ST.ACTION_SEQ) AS NDC_CODE
	FROM
		DOSES_ACTIONS,
		PHA_PROD_DISP_OBS_ST
	WHERE
		DOSES_ACTIONS.ORIG_ORDER_ID = PHA_PROD_DISP_OBS_ST.ORDER_ID
		AND DOSES_ACTIONS.ACTION_SEQUENCE = PHA_PROD_DISP_OBS_ST.ACTION_SEQ
		AND PHA_PROD_DISP_OBS_ST.ING_SEQ = 1
	GROUP BY
		DOSES_ACTIONS.ORIG_ORDER_ID,
		DOSES_ACTIONS.ACTION_SEQUENCE
), PKG_NDC AS (
	SELECT
		DOSES_ACTIONS.ORIG_ORDER_ID,
		DOSES_ACTIONS.ACTION_SEQUENCE,
		COALESCE(MLTM_NDC_OUTER_INNER_MAP.OUTER_NDC_CODE, NDC_LOOKUP.NDC_CODE) AS PKG_NDC_CODE
	FROM
		DOSES_ACTIONS,
		MLTM_NDC_OUTER_INNER_MAP,
		NDC_LOOKUP
	WHERE
		DOSES_ACTIONS.ORIG_ORDER_ID = NDC_LOOKUP.ORIG_ORDER_ID(+)
		AND NDC_LOOKUP.NDC_CODE = MLTM_NDC_OUTER_INNER_MAP.INNER_NDC_CODE(+)	
), PKG_SIZE AS (
	SELECT
		PKG_NDC.ORIG_ORDER_ID,
		PKG_NDC.ACTION_SEQUENCE,
		MLTM_NDC_CORE_DESCRIPTION.NDC_CODE,
		MLTM_NDC_CORE_DESCRIPTION.INNER_PACKAGE_SIZE,
		MLTM_NDC_CORE_DESCRIPTION.INNER_PACKAGE_DESC_CODE,
		MLTM_NDC_CORE_DESCRIPTION.OUTER_PACKAGE_SIZE,
		MLTM_NDC_CORE_DESCRIPTION.UNIT_DOSE_CODE,
		MLTM_NDC_CORE_DESCRIPTION.REPACKAGED,
		MLTM_NDC_COST.COST,
		MLTM_NDC_COST.INVENTORY_TYPE		
	FROM
		PKG_NDC,
		MLTM_NDC_CORE_DESCRIPTION,
		MLTM_NDC_COST
	WHERE
		PKG_NDC.PKG_NDC_CODE = MLTM_NDC_CORE_DESCRIPTION.NDC_CODE
		AND MLTM_NDC_CORE_DESCRIPTION.NDC_CODE = MLTM_NDC_COST.NDC_CODE
), COST_PIVOT AS (
	SELECT * FROM PKG_SIZE
	PIVOT(
		MIN(COST) FOR INVENTORY_TYPE IN (
			'A' AS A_COST,
			'C' AS C_COST,
			'F' AS F_COST,
			'M' AS M_COST,
			'W' AS W_COST
		)
	)
), DOSE_COSTS AS (
	SELECT
		DOSES_ACTIONS.*,
		MED_PRODS.ITEM_ID,
		MED_PRODS.DOSE_QUANTITY,
		pi_get_cv_display(MED_PRODS.DOSE_QUANTITY_UNIT_CD) AS DOSE_QUANTITY_UNIT,
		NDC_LOOKUP.RXA_INNER_PKG_QTY,
		NDC_LOOKUP.RXA_INNER_PKG_UNIT_CD,
		NDC_LOOKUP.RXA_INNER_PKG_UNIT,
		COST_PIVOT.NDC_CODE,
		COST_PIVOT.INNER_PACKAGE_SIZE,
		COST_PIVOT.INNER_PACKAGE_DESC_CODE,
		COST_PIVOT.OUTER_PACKAGE_SIZE,
		COST_PIVOT.UNIT_DOSE_CODE,
		COST_PIVOT.REPACKAGED,
		COST_PIVOT.A_COST,
		COST_PIVOT.C_COST,
		COST_PIVOT.F_COST,
		COST_PIVOT.M_COST,
		COST_PIVOT.W_COST,
		CASE
			WHEN COST_PIVOT.INNER_PACKAGE_SIZE > 0 AND COST_PIVOT.OUTER_PACKAGE_SIZE > 0 THEN 
				COST_PIVOT.A_COST / COST_PIVOT.INNER_PACKAGE_SIZE / COST_PIVOT.OUTER_PACKAGE_SIZE * MED_PRODS.DOSE_QUANTITY
			WHEN COST_PIVOT.INNER_PACKAGE_SIZE > 0 THEN
				COST_PIVOT.A_COST / COST_PIVOT.INNER_PACKAGE_SIZE * MED_PRODS.DOSE_QUANTITY
			WHEN COST_PIVOT.OUTER_PACKAGE_SIZE > 0 THEN 
				COST_PIVOT.A_COST / COST_PIVOT.OUTER_PACKAGE_SIZE * MED_PRODS.DOSE_QUANTITY
			ELSE
				COST_PIVOT.A_COST * MED_PRODS.DOSE_QUANTITY
		END AS A_COST_DOSE,
		CASE
			WHEN COST_PIVOT.INNER_PACKAGE_SIZE > 0 AND COST_PIVOT.OUTER_PACKAGE_SIZE > 0 THEN 
				COST_PIVOT.W_COST / COST_PIVOT.INNER_PACKAGE_SIZE / COST_PIVOT.OUTER_PACKAGE_SIZE * MED_PRODS.DOSE_QUANTITY
			WHEN COST_PIVOT.INNER_PACKAGE_SIZE > 0 THEN
				COST_PIVOT.W_COST / COST_PIVOT.INNER_PACKAGE_SIZE * MED_PRODS.DOSE_QUANTITY
			WHEN COST_PIVOT.OUTER_PACKAGE_SIZE > 0 THEN 
				COST_PIVOT.W_COST / COST_PIVOT.OUTER_PACKAGE_SIZE * MED_PRODS.DOSE_QUANTITY
			ELSE
				COST_PIVOT.W_COST * MED_PRODS.DOSE_QUANTITY
		END AS W_COST_DOSE	
	FROM
		COST_PIVOT,
		DOSES_ACTIONS,
		MED_PRODS,
		NDC_LOOKUP
	WHERE
		DOSES_ACTIONS.ORIG_ORDER_ID = COST_PIVOT.ORIG_ORDER_ID(+)
		AND DOSES_ACTIONS.ACTION_SEQUENCE = COST_PIVOT.ACTION_SEQUENCE(+)
		AND DOSES_ACTIONS.EVENT_ID = MED_PRODS.EVENT_ID
		AND DOSES_ACTIONS.ORIG_ORDER_ID = NDC_LOOKUP.ORIG_ORDER_ID(+)
		AND DOSES_ACTIONS.ACTION_SEQUENCE = NDC_LOOKUP.ACTION_SEQUENCE(+)
)

SELECT * FROM DOSE_COSTS

/* SELECT
	MEDICATION,
	ADMIN_ROUTE,
	DOSE_QUANTITY_UNIT,
	COUNT(DISTINCT ENCNTR_ID) AS NUM_PTS,
	COUNT(DISTINCT EVENT_ID) AS NUM_DOSES,
	SUM(DOSE_QUANTITY) AS SUM_QTY,
	SUM(A_COST_DOSE) AS SUM_A_COST,
	SUM(W_COST_DOSE) AS SUM_W_COST
FROM
	DOSE_COSTS
GROUP BY
	MEDICATION,
	ADMIN_ROUTE,
	DOSE_QUANTITY_UNIT */
